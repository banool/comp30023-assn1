This report investigates how different factors affect the number of swaps
made throughout simulation duration. All tests use multi because fcfs wouldn't 
reveal much considering only one process would be loaded into memory at a time.

This table displays the number of swaps to disk at different max memory sizes.
Each test has 100 processes of random size (between 1 and maximum memory size)
and time duration. 1000 tests are then run to compute the average. 

Table 1: Max memory size vs. Average number of swaps
---------------------------------------------------
MaxMemory:     8. Average swaps: 189.677
MaxMemory:    16. Average swaps: 190.066
MaxMemory:    32. Average swaps: 189.724
MaxMemory:    64. Average swaps: 189.646
MaxMemory:   128. Average swaps: 190.092
MaxMemory:   256. Average swaps: 189.806
MaxMemory:   512. Average swaps: 189.410
MaxMemory:  1024. Average swaps: 189.650
MaxMemory:  2048. Average swaps: 189.676
MaxMemory:  4096. Average swaps: 189.914
MaxMemory:  8192. Average swaps: 189.277
MaxMemory: 16384. Average swaps: 189.791

It is fairly obvious that with a change in maximum memory size and no change in
the other factors, swap number is not affected. This is hardly surprising
however because the process sizes are scaling with memory and on average will
be about half the size of max memory.

For further tests, the size of each process relative to max memory size can
be tested. For these results, a modifier variable is added. This modifier
indicates the maximum proportion of max memory size that a process can take up.
E.g. Modifier = 0.1 and MaxMemory = 100 means max process size = 10

This test has a fixed MaxMemory of 2048. The processes' size scale betweeen
0.1 of max memory by 0.1 increments to 1 of max memory. Uses multi.

Table 2: Process size as proportion of memory vs. Average number of swaps
--------------------------------------------------------------------------
Average swaps: 69.2340. Modifier: 0.05. Ratio 1384.68
Average swaps: 111.995. Modifier: 0.10. Ratio 1119.95
Average swaps: 131.748. Modifier: 0.15. Ratio  878.32
Average swaps: 142.922. Modifier: 0.20. Ratio  714.61
Average swaps: 150.985. Modifier: 0.25. Ratio  603.94
Average swaps: 156.931. Modifier: 0.30. Ratio  523.10
Average swaps: 161.607. Modifier: 0.35. Ratio  461.73
Average swaps: 165.565. Modifier: 0.40. Ratio  413.91
Average swaps: 168.444. Modifier: 0.45. Ratio  374.32
Average swaps: 171.751. Modifier: 0.50. Ratio  343.50
Average swaps: 174.480. Modifier: 0.55. Ratio  317.24
Average swaps: 178.603. Modifier: 0.60. Ratio  297.67
Average swaps: 180.162. Modifier: 0.65. Ratio  277.17
Average swaps: 182.302. Modifier: 0.70. Ratio  260.43
Average swaps: 185.007. Modifier: 0.75. Ratio  246.68
Average swaps: 186.151. Modifier: 0.80. Ratio  232.69
Average swaps: 187.119. Modifier: 0.85. Ratio  220.14
Average swaps: 188.452. Modifier: 0.90. Ratio  209.39
Average swaps: 188.833. Modifier: 0.95. Ratio  198.77

Unsurprisingly, as process size increases so does the number of swaps.
This makes sense because a large processes need more memory and therefore need
more processes to be swapped out to have them fit.

More interestingly however, the ratio of average swaps over the modifier
decreases with greater process size. Inversely, this means that as processes
get smaller and smaller, the number of swaps decreases exponentially. 

This indicates that that having either:
1. Large memory
2. Small processes
such that processes are small compared to max memory size makes a 
proportionally more significant impact on how efficiently memory is used. 
